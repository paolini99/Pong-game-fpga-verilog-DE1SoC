
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,


	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO0GPIO,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO1GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

// clk: array di 32 segnali per i clock divisi
wire [31:0] clk;


//=======================================================
//  Structural coding
//=======================================================

// Spegnimento dei display HEX2 e HEX3
assign HEX2 = 7'b1111111;  // HEX2 spento
assign HEX3 = 7'b1111111;  // HEX3 spento


// Istanziazione del modulo clock_divider
clock_divider clkdiv (
    .clock(CLOCK_50),          // Clock in ingresso a 50 MHz
    .divided_clocks(clk)       // Clock divisi in uscita
);


wire p_up, p_down;

keyboard_control keyboard (
    .clk(CLOCK_50),
    .reset_n(KEY[0]),
    .ps2_clk(PS2_CLK),
    .ps2_dat(PS2_DAT),
    .p_up(p_up),
    .p_down(p_down)
);

//assign LEDR[1] = led_up;
//assign LEDR[2] = led_down;

pong_game pong (
    .clk(clk[0]),              // Uso del primo segnale di clock diviso
    .reset(SW[9]),             // Segnale di reset da SW[9]
    .VGA_HS(VGA_HS),           // Segnale di sincronizzazione orizzontale VGA
    .VGA_VS(VGA_VS),           // Segnale di sincronizzazione verticale VGA
    .VGA_R(VGA_R),             // Canale rosso VGA
    .VGA_G(VGA_G),             // Canale verde VGA
    .VGA_B(VGA_B),             // Canale blu VGA
    .KEY(KEY),                 // Tasti di input per il controllo
    .SW(SW[8:0]),              // Interruttori per la funzionalit√† del gioco
    .HEX5(HEX5),               // Uscita verso il display HEX5
    .HEX4(HEX4),               // Uscita verso il display HEX4
    .HEX1(HEX1),               // Uscita verso il display HEX1
    .HEX0(HEX0),               // Uscita verso il display HEX0
    .VGA_BLANK_N(VGA_BLANK_N), // Segnale di blanking VGA
    .VGA_SYNC_N(VGA_SYNC_N),   // Segnale di sincronizzazione VGA
    .VGA_CLK(VGA_CLK),          // Clock VGA
	 .up(p_up),
	 .down(p_down)
);



endmodule

